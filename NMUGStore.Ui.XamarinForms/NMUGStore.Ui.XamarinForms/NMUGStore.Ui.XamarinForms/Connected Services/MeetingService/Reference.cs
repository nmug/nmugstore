//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NMUGStore.Ui.XamarinForms.MeetingService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MeetingDetail", Namespace="http://schemas.datacontract.org/2004/07/NMUG.WCFHost")]
    public partial class MeetingDetail : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.DateTime MeetingDateTimeField;
        
        private int MeetingIdField;
        
        private string MeetingNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime MeetingDateTime {
            get {
                return this.MeetingDateTimeField;
            }
            set {
                if ((this.MeetingDateTimeField.Equals(value) != true)) {
                    this.MeetingDateTimeField = value;
                    this.RaisePropertyChanged("MeetingDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MeetingId {
            get {
                return this.MeetingIdField;
            }
            set {
                if ((this.MeetingIdField.Equals(value) != true)) {
                    this.MeetingIdField = value;
                    this.RaisePropertyChanged("MeetingId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MeetingName {
            get {
                return this.MeetingNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MeetingNameField, value) != true)) {
                    this.MeetingNameField = value;
                    this.RaisePropertyChanged("MeetingName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MeetingService.IMeetingService")]
    public interface IMeetingService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMeetingService/GetMeetingDetails", ReplyAction="http://tempuri.org/IMeetingService/GetMeetingDetailsResponse")]
        System.IAsyncResult BeginGetMeetingDetails(System.DateTime meetingDateTime, System.AsyncCallback callback, object asyncState);
        
        NMUGStore.Ui.XamarinForms.MeetingService.MeetingDetail EndGetMeetingDetails(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMeetingService/GetMeetings", ReplyAction="http://tempuri.org/IMeetingService/GetMeetingsResponse")]
        System.IAsyncResult BeginGetMeetings(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<NMUGStore.Ui.XamarinForms.MeetingService.MeetingDetail> EndGetMeetings(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMeetingServiceChannel : NMUGStore.Ui.XamarinForms.MeetingService.IMeetingService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMeetingDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMeetingDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public NMUGStore.Ui.XamarinForms.MeetingService.MeetingDetail Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((NMUGStore.Ui.XamarinForms.MeetingService.MeetingDetail)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMeetingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMeetingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<NMUGStore.Ui.XamarinForms.MeetingService.MeetingDetail> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<NMUGStore.Ui.XamarinForms.MeetingService.MeetingDetail>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MeetingServiceClient : System.ServiceModel.ClientBase<NMUGStore.Ui.XamarinForms.MeetingService.IMeetingService>, NMUGStore.Ui.XamarinForms.MeetingService.IMeetingService {
        
        private BeginOperationDelegate onBeginGetMeetingDetailsDelegate;
        
        private EndOperationDelegate onEndGetMeetingDetailsDelegate;
        
        private System.Threading.SendOrPostCallback onGetMeetingDetailsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMeetingsDelegate;
        
        private EndOperationDelegate onEndGetMeetingsDelegate;
        
        private System.Threading.SendOrPostCallback onGetMeetingsCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public MeetingServiceClient() : 
                base(MeetingServiceClient.GetDefaultBinding(), MeetingServiceClient.GetDefaultEndpointAddress()) {
        }
        
        public MeetingServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(MeetingServiceClient.GetBindingForEndpoint(endpointConfiguration), MeetingServiceClient.GetEndpointAddress(endpointConfiguration)) {
        }
        
        public MeetingServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(MeetingServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
        }
        
        public MeetingServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(MeetingServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
        }
        
        public MeetingServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetMeetingDetailsCompletedEventArgs> GetMeetingDetailsCompleted;
        
        public event System.EventHandler<GetMeetingsCompletedEventArgs> GetMeetingsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult NMUGStore.Ui.XamarinForms.MeetingService.IMeetingService.BeginGetMeetingDetails(System.DateTime meetingDateTime, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMeetingDetails(meetingDateTime, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        NMUGStore.Ui.XamarinForms.MeetingService.MeetingDetail NMUGStore.Ui.XamarinForms.MeetingService.IMeetingService.EndGetMeetingDetails(System.IAsyncResult result) {
            return base.Channel.EndGetMeetingDetails(result);
        }
        
        private System.IAsyncResult OnBeginGetMeetingDetails(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.DateTime meetingDateTime = ((System.DateTime)(inValues[0]));
            return ((NMUGStore.Ui.XamarinForms.MeetingService.IMeetingService)(this)).BeginGetMeetingDetails(meetingDateTime, callback, asyncState);
        }
        
        private object[] OnEndGetMeetingDetails(System.IAsyncResult result) {
            NMUGStore.Ui.XamarinForms.MeetingService.MeetingDetail retVal = ((NMUGStore.Ui.XamarinForms.MeetingService.IMeetingService)(this)).EndGetMeetingDetails(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMeetingDetailsCompleted(object state) {
            if ((this.GetMeetingDetailsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMeetingDetailsCompleted(this, new GetMeetingDetailsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMeetingDetailsAsync(System.DateTime meetingDateTime) {
            this.GetMeetingDetailsAsync(meetingDateTime, null);
        }
        
        public void GetMeetingDetailsAsync(System.DateTime meetingDateTime, object userState) {
            if ((this.onBeginGetMeetingDetailsDelegate == null)) {
                this.onBeginGetMeetingDetailsDelegate = new BeginOperationDelegate(this.OnBeginGetMeetingDetails);
            }
            if ((this.onEndGetMeetingDetailsDelegate == null)) {
                this.onEndGetMeetingDetailsDelegate = new EndOperationDelegate(this.OnEndGetMeetingDetails);
            }
            if ((this.onGetMeetingDetailsCompletedDelegate == null)) {
                this.onGetMeetingDetailsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMeetingDetailsCompleted);
            }
            base.InvokeAsync(this.onBeginGetMeetingDetailsDelegate, new object[] {
                        meetingDateTime}, this.onEndGetMeetingDetailsDelegate, this.onGetMeetingDetailsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult NMUGStore.Ui.XamarinForms.MeetingService.IMeetingService.BeginGetMeetings(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMeetings(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<NMUGStore.Ui.XamarinForms.MeetingService.MeetingDetail> NMUGStore.Ui.XamarinForms.MeetingService.IMeetingService.EndGetMeetings(System.IAsyncResult result) {
            return base.Channel.EndGetMeetings(result);
        }
        
        private System.IAsyncResult OnBeginGetMeetings(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((NMUGStore.Ui.XamarinForms.MeetingService.IMeetingService)(this)).BeginGetMeetings(callback, asyncState);
        }
        
        private object[] OnEndGetMeetings(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<NMUGStore.Ui.XamarinForms.MeetingService.MeetingDetail> retVal = ((NMUGStore.Ui.XamarinForms.MeetingService.IMeetingService)(this)).EndGetMeetings(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMeetingsCompleted(object state) {
            if ((this.GetMeetingsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMeetingsCompleted(this, new GetMeetingsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMeetingsAsync() {
            this.GetMeetingsAsync(null);
        }
        
        public void GetMeetingsAsync(object userState) {
            if ((this.onBeginGetMeetingsDelegate == null)) {
                this.onBeginGetMeetingsDelegate = new BeginOperationDelegate(this.OnBeginGetMeetings);
            }
            if ((this.onEndGetMeetingsDelegate == null)) {
                this.onEndGetMeetingsDelegate = new EndOperationDelegate(this.OnEndGetMeetings);
            }
            if ((this.onGetMeetingsCompletedDelegate == null)) {
                this.onGetMeetingsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMeetingsCompleted);
            }
            base.InvokeAsync(this.onBeginGetMeetingsDelegate, null, this.onEndGetMeetingsDelegate, this.onGetMeetingsCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override NMUGStore.Ui.XamarinForms.MeetingService.IMeetingService CreateChannel() {
            return new MeetingServiceClientChannel(this);
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IMeetingService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.MaxReceivedMessageSize = int.MaxValue;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IMeetingService)) {
                return new System.ServiceModel.EndpointAddress("http://localhost/NMUG.WCFHost/MeetingService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return MeetingServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IMeetingService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return MeetingServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IMeetingService);
        }
        
        private class MeetingServiceClientChannel : ChannelBase<NMUGStore.Ui.XamarinForms.MeetingService.IMeetingService>, NMUGStore.Ui.XamarinForms.MeetingService.IMeetingService {
            
            public MeetingServiceClientChannel(System.ServiceModel.ClientBase<NMUGStore.Ui.XamarinForms.MeetingService.IMeetingService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetMeetingDetails(System.DateTime meetingDateTime, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = meetingDateTime;
                System.IAsyncResult _result = base.BeginInvoke("GetMeetingDetails", _args, callback, asyncState);
                return _result;
            }
            
            public NMUGStore.Ui.XamarinForms.MeetingService.MeetingDetail EndGetMeetingDetails(System.IAsyncResult result) {
                object[] _args = new object[0];
                NMUGStore.Ui.XamarinForms.MeetingService.MeetingDetail _result = ((NMUGStore.Ui.XamarinForms.MeetingService.MeetingDetail)(base.EndInvoke("GetMeetingDetails", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetMeetings(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetMeetings", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<NMUGStore.Ui.XamarinForms.MeetingService.MeetingDetail> EndGetMeetings(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<NMUGStore.Ui.XamarinForms.MeetingService.MeetingDetail> _result = ((System.Collections.ObjectModel.ObservableCollection<NMUGStore.Ui.XamarinForms.MeetingService.MeetingDetail>)(base.EndInvoke("GetMeetings", _args, result)));
                return _result;
            }
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_IMeetingService,
        }
    }
}
